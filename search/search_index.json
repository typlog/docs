{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Typlog offers the possibility to extend its powers. Users with some programming knowledge can fully utilize the power by using the Typlog API.","title":"Introduction"},{"location":"#introduction","text":"Typlog offers the possibility to extend its powers. Users with some programming knowledge can fully utilize the power by using the Typlog API.","title":"Introduction"},{"location":"content-api/","text":"Content API JSON Feed /feed.json /posts/feed.json /episodes/feed.json JSON Feed is a format similar to RSS and Atom but in JSON. It is easy to parse by programs. Ever website on Typlog has one or more JSON Feeds. Here are some examples: https://blog.typlog.com/feed.json https://lepture.com/posts/feed.json http://fakefestival.org/episodes/feed.json oEmbed https://typlog.com/oembed?url={episode_url} oEmbed is a format for allowing an embedded representation of a URL on third party sites. Here is an example: https://typlog.com/oembed?url=https%3A//fakefestival.org/episodes/21 Pro API These API endpoints require pro plans for blogs and podcasts. Endpoints Description /api/posts List recent posts /api/posts?year={year} List posts by year /api/posts/{postId} Get a single post by ID /api/posts/slug/{slug} Get a single post by slug /api/episodes List recent episodes /api/episodes?year={year} List episodes by year /api/episodes/{episodeId} Get a single episode by ID /api/episodes/slug/{slug} Get a single episode by slug Here are some examples: https://blog.typlog.com/api/posts https://blog.typlog.com/api/posts?year=2019 https://blog.typlog.com/api/posts/10202 https://blog.typlog.com/api/posts/slug/metrics-v2 https://uxcoffee.typlog.io/api/episodes https://uxcoffee.typlog.io/api/episodes?year=2019 https://uxcoffee.typlog.io/api/episodes/1406 https://uxcoffee.typlog.io/api/episodes/slug/66","title":"Content API"},{"location":"content-api/#content-api","text":"","title":"Content API"},{"location":"content-api/#json-feed","text":"/feed.json /posts/feed.json /episodes/feed.json JSON Feed is a format similar to RSS and Atom but in JSON. It is easy to parse by programs. Ever website on Typlog has one or more JSON Feeds. Here are some examples: https://blog.typlog.com/feed.json https://lepture.com/posts/feed.json http://fakefestival.org/episodes/feed.json","title":"JSON Feed"},{"location":"content-api/#oembed","text":"https://typlog.com/oembed?url={episode_url} oEmbed is a format for allowing an embedded representation of a URL on third party sites. Here is an example: https://typlog.com/oembed?url=https%3A//fakefestival.org/episodes/21","title":"oEmbed"},{"location":"content-api/#pro-api","text":"These API endpoints require pro plans for blogs and podcasts. Endpoints Description /api/posts List recent posts /api/posts?year={year} List posts by year /api/posts/{postId} Get a single post by ID /api/posts/slug/{slug} Get a single post by slug /api/episodes List recent episodes /api/episodes?year={year} List episodes by year /api/episodes/{episodeId} Get a single episode by ID /api/episodes/slug/{slug} Get a single episode by slug Here are some examples: https://blog.typlog.com/api/posts https://blog.typlog.com/api/posts?year=2019 https://blog.typlog.com/api/posts/10202 https://blog.typlog.com/api/posts/slug/metrics-v2 https://uxcoffee.typlog.io/api/episodes https://uxcoffee.typlog.io/api/episodes?year=2019 https://uxcoffee.typlog.io/api/episodes/1406 https://uxcoffee.typlog.io/api/episodes/slug/66","title":"Pro API"},{"location":"domain/","text":"","title":"Domain"},{"location":"podcast/","text":"","title":"Podcast Hosting"},{"location":"start/","text":"","title":"Get Started"},{"location":"theme/","text":"Preparation To develop your own theme, you need to grab an API token at first. You can create one in your account system. Click https://typlog.com/account/tokens/add to create one. PLEASE CHECK THE theme SCOPE BEFORE SAVING THE TOKEN. You will also use serve-theme tool to develop your theme, get the executable binary file from https://github.com/typlog/serve-theme/releases . Download the one matching your OS system, rename it ot serve-theme . This tool can create a localhost site for previewing your current theme. Templates Let's create an example theme called hello . First, we create a folder hello , then we add some files into this folder: $ cd hello $ ls README.md home.j2 item.j2 list.j2 hello.css theme.json In this folder, we have 3 templates: home.j2 - this is your homepage list.j2 - template for posts, episodes list/archive page item.j2 - detail page for a post, episode or page. Another required file is theme.json , which contains information about your theme. Then we can start our dev server with serve-theme : $ export TOKEN=pt_xxxx # this token is created in preparation $ export SITE=123 # find your site ID in Typlog $ ../serve-theme # assuming this bin file is located in the parent folder 2021/09/21 20:54:44 Listening . on port 7000 Then open your browser and visit http://localhost:7000 . Let's add some code into home.j2 file: {% block body %} <h1>Hello Typlog</h1> {% endblock %} Then refresh your browser, you will see the changes in http://localhost:7000 . But the above code is useless, you have to learn the variables provided by Typlog to add content into your templates. These templates are Jinja templates. You can learn the syntax at the offical documentation: https://jinja.palletsprojects.com/en/3.0.x/templates/ . Blocks We don't use {% extends %} in Typlog themes, each template inherits its own base layout which contains many usefull code in <head> . What we actually need are blocks : meta Adding more <meta> , <link> tag in meta block: {% block meta %} <meta ....> {% endblock %} style Adding css in style block: {% block style %} <style>...</style> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{{ static_url }}hello.css\"> {% endblock } body This is the main block for your theme. All content should be in this block. {% block body %} <header> ... </header> <main> ... </main> <footer> ... </footer> {% endblock %} script This block is located at the bottom of <body> tag, we can add some scripts here if needed: {% block script %} <script>console.log('test');</script> {% endblock %} Variables In the templates, we can use variables to render the real data into HTML. Here are all the variables: site This is a global variable, it contains the information about your site. The detail structure: site: id: integer name: string slug: string primary_lang: string languages: [string, string] base_url: uri active: boolean summary?: string favicon?: uri touch_icon?: src: uri width: integer height: integer logo?: src: uri width: integer height: integer cover?: src: uri width: integer height: integer license?: string nav_links: [{ url, title, blank }] color: string socials: {} sponsors: {} podcast?: # if enabled and has podcast information title: string subtitle: string description: string explicit: boolean categories: [] type: string image: uri email: string author: string homepage: uri keywords: string copyright: string links?: [ { icon, url, title, blank } ] query This is a global variable, it contains methods to query posts, episodes and etc. .latest_subjects(subject_type=None, count=10, contains=None) This will list the recent posts or episodes. This method is usually used in home.j2 template. The subject_type value can be post and audio . Here is an example in home.j2 : {% block body %} <ul> {% for post in query.latest_subjects('post') %} <li>{{ post.title }}</li> {% endfor %} </ul> {% endblock %} contains is a list, which can contain: authors , tags , and content . If there is no need to show authors, tags or full content of a post, we can pass nothing to contains which will improve the performance of rendering. .previous_subjects(subject, count=1, same_type=True, contains=None) This method can list the previous posts or episodes of the given subject(post or episode). This is usually used in item.j2 template: {% block body %} ... <div class=\"previous\"> {% for post in query.previous_subjects(page, count=2) %} <a href=\"{{ post.url }}>{{ post.title }}</a> {% endfor %} </div> {% endblock %} .previous_subject(subject, same_type=True, contains=None) This method will return only the nearest previous subject. It is used in item.j2 template. .next_subjects(subject, count=1, same_type=True, contains=None) This method is the same as query.previous_subjects , but for next . .next_subject(subject, same_type=True, contains=None) This method is the same as query.previous_subject , but for next . .tags() This method will list all the tags in your site: {% block body %} Tags: {% for tag in query.tags() %} <a href=\"{{ tag.url }}\">{{ tag.title }}</a> {% endfor %} {% endblock %} .years(subject_type=None) This method will list all the years of your posts or episodes. query.authors() This method will list all the authors, including hosts and guests in your site. features This is a global variable, it contains the features this site supports: features: post: boolean audio: boolean photo: boolean comment: boolean subscriber: boolean algolia: boolean page page is a context aware variable. It is different in each view. In list.j2 , the structure is: page: title: string url: path type: string topic: object items: [] prev_year?: integer prev_url?: path next_year?: integer next_url?: path A topic refers to a model about the list page. For instance, in a tag page: /tags/web , this topic is the tag object, which means you can set: {% set tag = page.topic %} This topic is usually used together with type . Here is an example of how to use it: {% macro render_tag(tag) %} ... {% endmacro } {% macro render_user(author) %} {% endmacro } ... {% block body %} {% if page.type == 'tag' %} {{ render_tag(page.topic) }} {% elif page.type == 'author' %} {{ render_tag(page.topic) }} {% elif page.type == 'episode_list' %} {{ render_podcast_info(site) }} {% else %} {{ render_site_info(site) }} {% endif %} {% endblock } items is a list of posts and episodes of current visiting page. In item.j2 , page refers to a post , an episode , or a page object. page: id: integer type: string # post, audio, page slug: string lang: string title: string cover?: src: uri width: integer height: integer subtitle?: string content: string url: path tags: array of tags authors: array of authors published_at: datetime updated_at: datetime comment: string # open, closed, disabled visibility: string # public, password, member render_html: function # render_html(lazy=True) -> HTML # only available with \"post\" type license: string review?: reply_to?: # only available with \"audio\" type image: uri explicit: boolean season: integer episode: integer episode_type: string duration: string audio: src: uri size: integer duration: integer mimetype: string In episode post, page contains two more attributes: page: # .... hosts: array of authors guests: array of authors static_url This variable will be a jsdelivr link. In development, serve-theme will replace this variable to the local css file. It is usually used in: {% block style %} <link rel=\"stylesheet\" href=\"{{ static_url }}hello.css\"> {% endblock %} tag This is not a variable, but it may be used via: query.tags() page.topic of tag type in list.j2 page.tags in item.j2 The structure of a tag: tag: id: integer slug: string title: string summary: string cover?: src: uri width: integer height: integer metadata: {} url: path author This object may be one of these: query.authors() page.topic of author type in list.j2 page.authors in item.j2 The structure of a author: author: username: string name: string cover?: src: uri width: integer height: integer avatar: uri bio: html metadata: {} url: path # only in page.authors role: string # primary, secondary Filters We can use all the built-in filters provided by Jinja. And in Typlog, there are two more filters: xmldatetime : used to format .published_at jinja <time datetime=\"{{ page.published_at|xmldatetime }}\"> thumbnail : used to resize image jinja <img src=\"{{ site.logo.src|thumbnail('ss') }}\"> Available sizes: s: small size m: middle size l: large size ss: crop to squared small size sm: squared middle size sl: squared large size Macros There are some built-in macros, which can be used to help you rendering the templates. {% from \"macros.j2\" import render_social_icons %} This macro is used for: {{ render_social_icons(site) }} {% from \"macros.j2\" import render_item, render_navigation %} The `render_item` is usually used in `home.j2` and `list.j2`. {% for item in query.latest_subjects() %} {{ render_item(site, item) }} {% endfor %} The `render_navigation` macro is used in `list.j2` to render the year navigation: {{ render_navigation(site, page) }} {% from \"macros.j2\" import render_subject_visibility, render_subject_content %} {% from \"macros.j2\" import render_subject_license, render_review_subject, render_subject_authors %} These macros are used in `item.j2`. The `render_subject_content` is used to render the content part, it will handle visibility automatically. {{ render_subject_content(site, page) }} Parameters for other macros: {{ render_subject_visibility(site, page) }} {{ render_subject_license(site, page) }} {% if page.review %} {{ render_review_subject(page.review) }} {% endif %} {{ render_subject_authors(site, page) }} Snippets Here are the built-in snippets which we can {% include %} them: this is typlog brand foot {% include \"_snippets/brand_foot.j2\" } this is your site foot {% include \"_snippets/site_foot.j2\" } Used in item.j2 : {% include \"_snippets/subject_share.j2\" %} {% include \"_snippets/subject_foot.j2\" %} JavaScript hooks In the rendered html, Typlog will inject a typlog.js script. This script has many features, we can use js-? class to connect the hooks. js-search : popup the search overlay <input class=\"js-search\" type=\"text\" placeholder=\"Search...\" {% if features.algolia %}data-id=\"{{ site.algolia_id }}\" data-key=\"{{ site.algolia_key }}\"{% endif %}> js-subscribe : popup the subscribe dialog <button class=\"js-subscribe\">Subscribe</button> js-audio : render the player UI <div class=\"entry-audio js-audio\"> <audio src=\"{{ page.audio.src }}\" preload=\"none\" controls {% if page.image %}data-image=\"{{ page.image|thumbnail('ss') }}\"{% endif %}> </audio> </div> This hook is already included in {{ render_subject_content(site, page) }} js-enjoy : click to send like event <button class=\"js-enjoy\">Enjoy</button> This hook is already included in snippet: {% include \"_snippets/subject_share.j2\" %} Submit your theme When you have finished developing your theme, fill all the information in theme.json . The required fields are: name author repo version images And then register your theme with a pull request to https://github.com/typlog/themes .","title":"Theme"},{"location":"theme/#preparation","text":"To develop your own theme, you need to grab an API token at first. You can create one in your account system. Click https://typlog.com/account/tokens/add to create one. PLEASE CHECK THE theme SCOPE BEFORE SAVING THE TOKEN. You will also use serve-theme tool to develop your theme, get the executable binary file from https://github.com/typlog/serve-theme/releases . Download the one matching your OS system, rename it ot serve-theme . This tool can create a localhost site for previewing your current theme.","title":"Preparation"},{"location":"theme/#templates","text":"Let's create an example theme called hello . First, we create a folder hello , then we add some files into this folder: $ cd hello $ ls README.md home.j2 item.j2 list.j2 hello.css theme.json In this folder, we have 3 templates: home.j2 - this is your homepage list.j2 - template for posts, episodes list/archive page item.j2 - detail page for a post, episode or page. Another required file is theme.json , which contains information about your theme. Then we can start our dev server with serve-theme : $ export TOKEN=pt_xxxx # this token is created in preparation $ export SITE=123 # find your site ID in Typlog $ ../serve-theme # assuming this bin file is located in the parent folder 2021/09/21 20:54:44 Listening . on port 7000 Then open your browser and visit http://localhost:7000 . Let's add some code into home.j2 file: {% block body %} <h1>Hello Typlog</h1> {% endblock %} Then refresh your browser, you will see the changes in http://localhost:7000 . But the above code is useless, you have to learn the variables provided by Typlog to add content into your templates. These templates are Jinja templates. You can learn the syntax at the offical documentation: https://jinja.palletsprojects.com/en/3.0.x/templates/ .","title":"Templates"},{"location":"theme/#blocks","text":"We don't use {% extends %} in Typlog themes, each template inherits its own base layout which contains many usefull code in <head> . What we actually need are blocks :","title":"Blocks"},{"location":"theme/#meta","text":"Adding more <meta> , <link> tag in meta block: {% block meta %} <meta ....> {% endblock %}","title":"meta"},{"location":"theme/#style","text":"Adding css in style block: {% block style %} <style>...</style> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700&display=swap\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{{ static_url }}hello.css\"> {% endblock }","title":"style"},{"location":"theme/#body","text":"This is the main block for your theme. All content should be in this block. {% block body %} <header> ... </header> <main> ... </main> <footer> ... </footer> {% endblock %}","title":"body"},{"location":"theme/#script","text":"This block is located at the bottom of <body> tag, we can add some scripts here if needed: {% block script %} <script>console.log('test');</script> {% endblock %}","title":"script"},{"location":"theme/#variables","text":"In the templates, we can use variables to render the real data into HTML. Here are all the variables:","title":"Variables"},{"location":"theme/#site","text":"This is a global variable, it contains the information about your site. The detail structure: site: id: integer name: string slug: string primary_lang: string languages: [string, string] base_url: uri active: boolean summary?: string favicon?: uri touch_icon?: src: uri width: integer height: integer logo?: src: uri width: integer height: integer cover?: src: uri width: integer height: integer license?: string nav_links: [{ url, title, blank }] color: string socials: {} sponsors: {} podcast?: # if enabled and has podcast information title: string subtitle: string description: string explicit: boolean categories: [] type: string image: uri email: string author: string homepage: uri keywords: string copyright: string links?: [ { icon, url, title, blank } ]","title":"site"},{"location":"theme/#query","text":"This is a global variable, it contains methods to query posts, episodes and etc. .latest_subjects(subject_type=None, count=10, contains=None) This will list the recent posts or episodes. This method is usually used in home.j2 template. The subject_type value can be post and audio . Here is an example in home.j2 : {% block body %} <ul> {% for post in query.latest_subjects('post') %} <li>{{ post.title }}</li> {% endfor %} </ul> {% endblock %} contains is a list, which can contain: authors , tags , and content . If there is no need to show authors, tags or full content of a post, we can pass nothing to contains which will improve the performance of rendering. .previous_subjects(subject, count=1, same_type=True, contains=None) This method can list the previous posts or episodes of the given subject(post or episode). This is usually used in item.j2 template: {% block body %} ... <div class=\"previous\"> {% for post in query.previous_subjects(page, count=2) %} <a href=\"{{ post.url }}>{{ post.title }}</a> {% endfor %} </div> {% endblock %} .previous_subject(subject, same_type=True, contains=None) This method will return only the nearest previous subject. It is used in item.j2 template. .next_subjects(subject, count=1, same_type=True, contains=None) This method is the same as query.previous_subjects , but for next . .next_subject(subject, same_type=True, contains=None) This method is the same as query.previous_subject , but for next . .tags() This method will list all the tags in your site: {% block body %} Tags: {% for tag in query.tags() %} <a href=\"{{ tag.url }}\">{{ tag.title }}</a> {% endfor %} {% endblock %} .years(subject_type=None) This method will list all the years of your posts or episodes. query.authors() This method will list all the authors, including hosts and guests in your site.","title":"query"},{"location":"theme/#features","text":"This is a global variable, it contains the features this site supports: features: post: boolean audio: boolean photo: boolean comment: boolean subscriber: boolean algolia: boolean","title":"features"},{"location":"theme/#page","text":"page is a context aware variable. It is different in each view. In list.j2 , the structure is: page: title: string url: path type: string topic: object items: [] prev_year?: integer prev_url?: path next_year?: integer next_url?: path A topic refers to a model about the list page. For instance, in a tag page: /tags/web , this topic is the tag object, which means you can set: {% set tag = page.topic %} This topic is usually used together with type . Here is an example of how to use it: {% macro render_tag(tag) %} ... {% endmacro } {% macro render_user(author) %} {% endmacro } ... {% block body %} {% if page.type == 'tag' %} {{ render_tag(page.topic) }} {% elif page.type == 'author' %} {{ render_tag(page.topic) }} {% elif page.type == 'episode_list' %} {{ render_podcast_info(site) }} {% else %} {{ render_site_info(site) }} {% endif %} {% endblock } items is a list of posts and episodes of current visiting page. In item.j2 , page refers to a post , an episode , or a page object. page: id: integer type: string # post, audio, page slug: string lang: string title: string cover?: src: uri width: integer height: integer subtitle?: string content: string url: path tags: array of tags authors: array of authors published_at: datetime updated_at: datetime comment: string # open, closed, disabled visibility: string # public, password, member render_html: function # render_html(lazy=True) -> HTML # only available with \"post\" type license: string review?: reply_to?: # only available with \"audio\" type image: uri explicit: boolean season: integer episode: integer episode_type: string duration: string audio: src: uri size: integer duration: integer mimetype: string In episode post, page contains two more attributes: page: # .... hosts: array of authors guests: array of authors","title":"page"},{"location":"theme/#static_url","text":"This variable will be a jsdelivr link. In development, serve-theme will replace this variable to the local css file. It is usually used in: {% block style %} <link rel=\"stylesheet\" href=\"{{ static_url }}hello.css\"> {% endblock %}","title":"static_url"},{"location":"theme/#tag","text":"This is not a variable, but it may be used via: query.tags() page.topic of tag type in list.j2 page.tags in item.j2 The structure of a tag: tag: id: integer slug: string title: string summary: string cover?: src: uri width: integer height: integer metadata: {} url: path","title":"tag"},{"location":"theme/#author","text":"This object may be one of these: query.authors() page.topic of author type in list.j2 page.authors in item.j2 The structure of a author: author: username: string name: string cover?: src: uri width: integer height: integer avatar: uri bio: html metadata: {} url: path # only in page.authors role: string # primary, secondary","title":"author"},{"location":"theme/#filters","text":"We can use all the built-in filters provided by Jinja. And in Typlog, there are two more filters: xmldatetime : used to format .published_at jinja <time datetime=\"{{ page.published_at|xmldatetime }}\"> thumbnail : used to resize image jinja <img src=\"{{ site.logo.src|thumbnail('ss') }}\"> Available sizes: s: small size m: middle size l: large size ss: crop to squared small size sm: squared middle size sl: squared large size","title":"Filters"},{"location":"theme/#macros","text":"There are some built-in macros, which can be used to help you rendering the templates. {% from \"macros.j2\" import render_social_icons %} This macro is used for: {{ render_social_icons(site) }} {% from \"macros.j2\" import render_item, render_navigation %} The `render_item` is usually used in `home.j2` and `list.j2`. {% for item in query.latest_subjects() %} {{ render_item(site, item) }} {% endfor %} The `render_navigation` macro is used in `list.j2` to render the year navigation: {{ render_navigation(site, page) }} {% from \"macros.j2\" import render_subject_visibility, render_subject_content %} {% from \"macros.j2\" import render_subject_license, render_review_subject, render_subject_authors %} These macros are used in `item.j2`. The `render_subject_content` is used to render the content part, it will handle visibility automatically. {{ render_subject_content(site, page) }} Parameters for other macros: {{ render_subject_visibility(site, page) }} {{ render_subject_license(site, page) }} {% if page.review %} {{ render_review_subject(page.review) }} {% endif %} {{ render_subject_authors(site, page) }}","title":"Macros"},{"location":"theme/#snippets","text":"Here are the built-in snippets which we can {% include %} them: this is typlog brand foot {% include \"_snippets/brand_foot.j2\" } this is your site foot {% include \"_snippets/site_foot.j2\" } Used in item.j2 : {% include \"_snippets/subject_share.j2\" %} {% include \"_snippets/subject_foot.j2\" %}","title":"Snippets"},{"location":"theme/#javascript-hooks","text":"In the rendered html, Typlog will inject a typlog.js script. This script has many features, we can use js-? class to connect the hooks. js-search : popup the search overlay <input class=\"js-search\" type=\"text\" placeholder=\"Search...\" {% if features.algolia %}data-id=\"{{ site.algolia_id }}\" data-key=\"{{ site.algolia_key }}\"{% endif %}> js-subscribe : popup the subscribe dialog <button class=\"js-subscribe\">Subscribe</button> js-audio : render the player UI <div class=\"entry-audio js-audio\"> <audio src=\"{{ page.audio.src }}\" preload=\"none\" controls {% if page.image %}data-image=\"{{ page.image|thumbnail('ss') }}\"{% endif %}> </audio> </div> This hook is already included in {{ render_subject_content(site, page) }} js-enjoy : click to send like event <button class=\"js-enjoy\">Enjoy</button> This hook is already included in snippet: {% include \"_snippets/subject_share.j2\" %}","title":"JavaScript hooks"},{"location":"theme/#submit-your-theme","text":"When you have finished developing your theme, fill all the information in theme.json . The required fields are: name author repo version images And then register your theme with a pull request to https://github.com/typlog/themes .","title":"Submit your theme"},{"location":"webhook/","text":"","title":"Webhook"}]}